/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidad.Alumno;
import universidad.AlumnoData;
import universidad.Conexion;
import universidad.Cursada;
import universidad.CursadaData;
import universidad.Materia;
import universidad.MateriaData;

/**
 *
 * @author programador
 */
public class VistasInscripciones extends javax.swing.JInternalFrame {
private CursadaData cursadaData;
private MateriaData materiaData;
private AlumnoData alumnoData;
private Conexion conexion;
private List<Alumno> listaAlumnos;
private DefaultTableModel modelo;



    /**
     * Creates new form vistasIncripciones
     */
    public VistasInscripciones() {
           initComponents();
           modelo = new DefaultTableModel();
           
    try {
        conexion = new Conexion();
        
        AlumnoData ad=new AlumnoData(conexion);
        listaAlumnos=ad.obtenerAlumnos();
        for(Alumno xx:listaAlumnos) {
            cbAlumnos.addItem(xx);
            
        }
        
        
        
    } catch (ClassNotFoundException ex) {
        JOptionPane.showMessageDialog(null,"Error de conexion");
    }
 armarCabecera();
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        rbInscriptas = new javax.swing.JRadioButton();
        rbNoInscriptas = new javax.swing.JRadioButton();
        btInscribir = new javax.swing.JButton();
        btAnular = new javax.swing.JButton();
        btSalir = new javax.swing.JButton();
        cbAlumnos = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("FORMULARIO DE INCRIPCION");

        jTextField1.setText("Alumno");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("LISTADO DE MATERIAS");

        rbInscriptas.setText("Inscriptas");
        rbInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInscriptasActionPerformed(evt);
            }
        });

        rbNoInscriptas.setText("No Inscriptas");
        rbNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNoInscriptasActionPerformed(evt);
            }
        });

        btInscribir.setText("Inscribir");
        btInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInscribirActionPerformed(evt);
            }
        });

        btAnular.setText("Anular Inscripcion");
        btAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnularActionPerformed(evt);
            }
        });

        btSalir.setText("Salir");

        cbAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlumnosActionPerformed(evt);
            }
        });

        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtMaterias);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(btInscribir)
                        .addGap(18, 18, 18)
                        .addComponent(btAnular, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(cbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(79, 79, 79)
                                    .addComponent(rbInscriptas)
                                    .addGap(18, 18, 18)
                                    .addComponent(rbNoInscriptas))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(401, 401, 401))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbInscriptas)
                    .addComponent(rbNoInscriptas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btInscribir)
                    .addComponent(btAnular)
                    .addComponent(btSalir))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void cbAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlumnosActionPerformed
        // TODO add your handling code here:
        borrarFilas();
        
        
        
        
    }//GEN-LAST:event_cbAlumnosActionPerformed

    private void rbNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNoInscriptasActionPerformed

        // TODO add your handling code here:
        
      
        
        
        rbInscriptas.setSelected(false);
        borrarFilas();
        cargarMateriasNoCursadas();
        btInscribir.setEnabled(false);
        btAnular.setSelected(true);
        
        
        
        
    }//GEN-LAST:event_rbNoInscriptasActionPerformed

    private void rbInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInscriptasActionPerformed

     
        rbNoInscriptas.setSelected(false);
        borrarFilas();
        cargarMateriasInscriptas();
        
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_rbInscriptasActionPerformed

    private void btInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInscribirActionPerformed
        // TODO add your handling code here:
        int fs=jtMaterias.getSelectedRow();
        if (fs!= -1){
        //recupero el alumno seleccionada del combobox
    
        
        Alumno a=(Alumno)cbAlumnos.getSelectedItem();
        
        //recupero los datos de la fila seleccionada
        int idMateria=(Integer)modelo.getValueAt(fs, 0);
        String nombreMateria= (String)modelo.getValueAt(fs, 1);
        
        Materia m= new Materia(idMateria,nombreMateria);
        Cursada c=new Cursada(a,m,0);
        CursadaData cd= new CursadaData(conexion);
        cd.guardarCursada(c);
        borrarFilas();
        
    }
        
    }//GEN-LAST:event_btInscribirActionPerformed

    private void btAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnularActionPerformed
        // TODO add your handling code here:
        
        
         int fs=jtMaterias.getSelectedRow();
        if (fs!= -1){
        //recupero el alumno seleccionada del combobox
    
        
        Alumno a=(Alumno)cbAlumnos.getSelectedItem();
        
        //recupero los datos de la fila seleccionada
        int idMateria=(Integer)modelo.getValueAt(fs, 0);
        
        CursadaData cd= new CursadaData(conexion);
        cd.borrarCursadaDeUnaMateriaDeunAlumno(a.getId(), idMateria);
        borrarFilas();
        
        
    }//GEN-LAST:event_btAnularActionPerformed
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnular;
    private javax.swing.JButton btInscribir;
    private javax.swing.JButton btSalir;
    private javax.swing.JComboBox<Alumno> cbAlumnos;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable jtMaterias;
    private javax.swing.JRadioButton rbInscriptas;
    private javax.swing.JRadioButton rbNoInscriptas;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera() {
        
        ArrayList<Object>columnas=new ArrayList <Object>();
        columnas.add("ID");
        columnas.add("Nombre");
        for (Object it:columnas) {
            modelo.addColumn(it);
        }
            jtMaterias.setModel(modelo);
            
        }
        
     private void borrarFilas() {
         int a=modelo.getRowCount()-1;
         for (int i=a;i>0;i--) {
             modelo.removeRow(i);
             
         }
         
     }   
     
     
     private void cargarMateriasInscriptas() {
         
         borrarFilas();
         CursadaData cd = new CursadaData(conexion);
         Alumno seleccionado=(Alumno)cbAlumnos.getSelectedItem();
         List<Materia> listaMaterias = 
                 cd.obtenerMateriasCursadas(seleccionado.getId());
         
        
         for(Materia m:listaMaterias) {
             
             modelo.addRow(new Object[]{m.getId(),m.getNombre()});
         }
         }
         private void cargarMateriasNoCursadas() {
              borrarFilas();
         CursadaData cd = new CursadaData(conexion);
         Alumno seleccionado=(Alumno)cbAlumnos.getSelectedItem();
         List<Materia> listaMaterias = 
                 cd.obtenerMateriasNOCursadas(seleccionado.getId());
         
         
        
         for(Materia m:listaMaterias) {
             
             modelo.addRow(new Object[]{m.getId(),m.getNombre()});
         }
         }
         
     }
   





